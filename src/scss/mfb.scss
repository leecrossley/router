i.icon-alert {
    height: 100%;
    width: 100%;
    background-image: url(data:image/svg+xml;utf8;base64,PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iaXNvLTg4NTktMSI/Pgo8c3ZnIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgeG1sbnM6eGxpbms9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiIHZlcnNpb249IjEuMSIgdmlld0JveD0iMCAwIDI5NC45NTEgMjk0Ljk1MSIgZW5hYmxlLWJhY2tncm91bmQ9Im5ldyAwIDAgMjk0Ljk1MSAyOTQuOTUxIiB3aWR0aD0iNTEycHgiIGhlaWdodD0iNTEycHgiPgogIDxnPgogICAgPGc+CiAgICAgIDxwYXRoIGQ9Im0xNDcuNDc1LDEwMy4xMDJjLTUuMjIsMC04LjcwMSwzLjQ4LTguNzAxLDguNzAxdjYyLjY0NGMwLDUuMjIgMy40OCw4LjcwMSA4LjcwMSw4LjcwMSA1LjIyLDAgOC43MDEtMy40OCA4LjcwMS04LjcwMXYtNjIuNjQ0YzAtNS4yMjEtMy40ODEtOC43MDEtOC43MDEtOC43MDF6IiBmaWxsPSIjRkZGRkZGIi8+CiAgICAgIDxwYXRoIGQ9Im0xNTIuNjk1LDIxMi43M2MtMy40OC0zLjQ4LTguNzAxLTMuNDgtMTIuMTgxLDAtMS43NCwxLjc0LTEuNzQsNS4yMi0xLjc0LDYuOTYgMCwzLjQ4IDAsNS4yMiAxLjc0LDYuOTYgMS43NCwxLjc0IDUuMjIsMS43NCA2Ljk2LDEuNzQgMS43NCwwIDUuMjIsMCAzLjQ4LTEuNzQgMS43NC0xLjc0IDMuNDgtNS4yMiAzLjQ4LTYuOTYgMC4wMDItMy40OCAwLjAwMi01LjIyLTEuNzM5LTYuOTZ6IiBmaWxsPSIjRkZGRkZGIi8+CiAgICAgIDxwYXRoIGQ9Im0yODguNDI1LDIxNC40N2wtMTAyLjY2Ny0xNzkuMjMyYy02Ljk2LTEzLjkyMS0yMi42MjEtMjIuNjIxLTM4LjI4My0yMi42MjEtMTUuNjYxLDAtMjkuNTgyLDguNzAxLTM4LjI4MywyMi42MjFsLTEwMi42NjcsMTc5LjIzMmMtOC43MDEsMTMuOTIxLTguNzAxLDMxLjMyMi01LjMyOTA3ZS0xNSw0NS4yNDMgNi45NiwxMy45MjEgMjIuNjIxLDIyLjYyMSAzOC4yODMsMjIuNjIxaDIwNS4zMzRjMTcuNDAxLDAgMzEuMzIyLTguNzAxIDM4LjI4My0yMi42MjEgOC43MDEtMTMuOTIxIDguNzAxLTMxLjMyMiAwLTQ1LjI0M3ptLTEzLjkyMSwzOC4yODNjLTMuNDgsOC43MDEtMTIuMTgxLDEzLjkyMS0yMi42MjEsMTMuOTIxaC0yMDcuMDc1Yy04LjcwMSwwLTE3LjQwMS01LjIyLTIyLjYyMS0xMy45MjEtNS4yMi04LjcwMS01LjIyLTE5LjE0MSAwLTI3Ljg0MmwxMDIuNjY3LTE3OS4yMzNjMy40OC04LjcwMSAxMi4xODEtMTMuOTIxIDIyLjYyMS0xMy45MjEgMTAuNDQxLDAgMTkuMTQxLDUuMjIgMjQuMzYyLDEzLjkyMWwxMDIuNjY3LDE3OS4yMzJjNS4yMjEsOC43MDEgNS4yMjEsMTkuMTQyIDAsMjcuODQzeiIgZmlsbD0iI0ZGRkZGRiIvPgogICAgPC9nPgogIDwvZz4KPC9zdmc+Cg==);
    background-position: 13px 11px;
    background-size: 30px;
    background-repeat: no-repeat;
}

i.icon-on {
    height: 100%;
    width: 100%;
    background-image: url(data:image/svg+xml;utf8;base64,PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPCFET0NUWVBFIHN2ZyBQVUJMSUMgIi0vL1czQy8vRFREIFNWRyAxLjEvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvR3JhcGhpY3MvU1ZHLzEuMS9EVEQvc3ZnMTEuZHRkIj4KPHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHhtbG5zOnhsaW5rPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIiB2ZXJzaW9uPSIxLjEiIHZpZXdCb3g9IjAgMCA1MTIgNTEyIiBlbmFibGUtYmFja2dyb3VuZD0ibmV3IDAgMCA1MTIgNTEyIiB3aWR0aD0iMzJweCIgaGVpZ2h0PSIzMnB4Ij4KICA8Zz4KICAgIDxnPgogICAgICA8Zz4KICAgICAgICA8cGF0aCBkPSJtMjU2LDUwMWMtMTI5LjYsMC0yMzUtMTAyLjItMjM1LTIyNy44IDAtODcuOCA1MC42LTE2Ni4zIDEzMi4xLTIwNC45IDEwLjItNC44IDIyLjQtMC41IDI3LjIsOS43IDQuOCwxMC4yIDAuNSwyMi40LTkuNywyNy4yLTY3LjEsMzEuOC0xMDguNyw5Ni4xLTEwOC43LDE2OC03LjEwNTQzZS0xNSwxMDMuMSA4Ny4xLDE4NyAxOTQuMSwxODcgMTA3LDAgMTk0LjEtODMuOSAxOTQuMS0xODcgMC03Mi40LTQ0LTEzOC45LTExMi4yLTE2OS41LTEwLjMtNC42LTE0LjktMTYuNy0xMC4zLTI3IDQuNi0xMC4zIDE2LjctMTQuOSAyNy0xMC4yIDgyLjksMzcuMSAxMzYuNCwxMTguMyAxMzYuNCwyMDYuNyAwLDEyNS42LTEwNS40LDIyNy44LTIzNSwyMjcuOHoiIGZpbGw9IiNGRkZGRkYiLz4KICAgICAgICA8cGF0aCBkPSJtMjU2LDI4Ny45Yy0xMS4zLDAtMjAuNC05LjEtMjAuNC0yMC40di0yMzYuMWMwLTExLjMgOS4yLTIwLjQgMjAuNC0yMC40IDExLjMsMCAyMC40LDkuMSAyMC40LDIwLjR2MjM2LjFjMCwxMS4zLTkuMSwyMC40LTIwLjQsMjAuNHoiIGZpbGw9IiNGRkZGRkYiLz4KICAgICAgPC9nPgogICAgPC9nPgogIDwvZz4KPC9zdmc+Cg==);
    background-position: 16px 15px;
    background-size: 24px;
    background-repeat: no-repeat;
}

/**
 * CONTENTS
 *
 * #Introduction........Naming conventions used throughout the code.
 *
 * #SETTINGS
 * Variables............Globally-available variables and config.
 *
 * #TOOLS
 * Mixins...............Useful mixins.
 *
 * #GENERIC
 * Demo styles..........Styles for demo only (consider removing these).
 *
 * #BASE
 * Raw styles...........The very basic component wrapper.
 * Modifiers............The basic styles dependant on component placement.
 * Debuggers............The basic styles dependant on component placement.
 *
 * #BUTTONS
 * Base..................Wrapping and constraining every button.
 * Modifiers.............Styles that depends on state and settings.
 * Animations............Main animations of the component.
 * Debuggers.............Styles for development.
 *
 * #LABELS
 * Base..................Wrapping and constraining every label.
 * Modifiers.............Styles that depends on state and settings.
 * Debuggers.............Styles for development.
 *
 * #DEVELOPMENT
 * In development........These styles are in development and not yet finalised
 * Debuggers.............Helper styles and flags for development.
 */

/*------------------------------------*\
    #Introduction
\*------------------------------------*/
/**
 * The code AND the comments use naming conventions to refer to each part of
 * the UI put in place by this component. If you see that somewhere they are
 * not followed please consider a Pull Request. The naming conventions are:
 *
 * "Component" : the widget itself as a whole. This is the last time it will be
 *               called anything different than "component". So, stay away from
 *               "widget", "button" or anything else when referring to the
 *               Component in general.
 *
 * "Main Button" : the button that is always in view. Hovering or clicking on it
 *                 will reveal the child buttons.
 *
 * "Child buttons" : if you've read the previous point you know what they are.
 *                   Did you read the previous point? :)
 *
 * "Label(s)" : the tooltip that fades in when hovering over a button.

/*------------------------------------*\
    #SETTINGS | Variables
\*------------------------------------*/

/**
 * These variables are the default styles that serve as fallback and can be
 * easily customised at compile time.
 * Consider overriding them in your own style sheets rather than editing them
 * here. Refer to the docs for more info.
 */

/* COLORS ----------------------------*/

// the main/primary color
$main-color: #436CA6 !default;
// aka the white text
$bright-text: rgba(255, 255, 255, 0.8) !default;

/* EFFECTS ---------------------------*/

// which effects must be made available in the css
$effects-zoomin: true !default;
$effects-slidein: false !default;
$effects-fountain: false !default;

/* SPEEDS ----------------------------*/

// the speed of the inflation of each button after hovering on the main button
$delay-staggering-inflate: 0.1s !default;
// when hovering on the main button the child buttons slide into view
$slide-speed: .5s !default;
// the labels disappear at this speed on mouse out
$label-hover-off: .5s !default;
// the labels appear at this speed on mouse over
$label-hover-on: .3s !default;

/* SIZES -----------------------------*/

// main button diameter
$main_button_size: 56px !default;
// main button diameter
$child_button_size: 56px !default;
// the distance of the main button from the closest corners of the screen
$border-distance: 25px !default;
// font-size for labels
$labels-font-size: 13px !default;
// top & bottom padding for the labels
$labels-padding-vertical: 4px !default;
// left & right padding for the labels
$labels-padding-horizontal: 10px !default;

/* SPACING ---------------------------*/

// space between buttons
$button-space: 70px !default;

// space between button and label
$button-label-space: 70px !default;

/* OTHER VARIABLES -------------------*/

// how many child buttons does the component have
$number-of-child-buttons: 3 !default;

/*------------------------------------*\
    #BASE | Raw styles
\*------------------------------------*/

/**
 * The very core styling of the button.
 * These styles are shared by every instance of the button.
 * Styles placed here should NOT care about placement in the screen,
 * options chosen by the user or state of the button.
 */

.mfb-component{
  box-sizing: border-box; // A better box-sizing
  margin: $border-distance;
  position: fixed;
  white-space: nowrap;
  z-index: 30;
  // this padding is really needed  only if the element is an <ul>
  // otherwise it can probably be ditched.
  padding-left: 0;
  list-style: none;
}

// make sure that everything inside this component
// inherits the same box-sizing
.mfb-component{
  *, *:before, *:after {
    box-sizing: inherit;
  }
}


/*------------------------------------*\
    #BASE | Modifiers
\*------------------------------------*/
/**
 * These styles depends on the placement of the button.
 * Styles can be:
 * 1. Top-left:  modified by the " --tl " suffix.
 * 2. Top-right: modified by the " --tr " suffix.
 * 3. Bottom-left:  modified by the " --bl " suffix.
 * 4. Bottom-right: modified by the " --br " suffix.
 */

.mfb-component--tl{
  @extend .mfb-component;
  left: 0; top: 0;
}
.mfb-component--tr{
  @extend .mfb-component;
  right: 0; top: 0;
}
.mfb-component--bl{
  @extend .mfb-component;
  left: 0; bottom: 0;
}
.mfb-component--br{
  @extend .mfb-component;
  right: 0; bottom: 0;
}


/*------------------------------------*\
    #BUTTONS | Base
\*------------------------------------*/

.mfb-component__button{
  background-color: $main-color;
  display: inline-block;
  position: relative;
  border: none;
  border-radius: 50%;
  box-shadow: 0 0 4px rgba(0,0,0,.14),0 4px 8px rgba(0,0,0,.28);
  cursor: pointer;
  outline: none;
  padding: 0;
  position: relative;
  -webkit-user-drag: none;
  font-weight: bold;
  color: #f1f1f1;
}

.mfb-component__button--child{
  background-color: #9DBCD9;
}

/**
 * This is the unordered list for the list items that contain
 * the child buttons.
 *
 */
.mfb-component__list{
  list-style: none;
  margin: 0;
  padding: 0;
  &>li{
    display: block;
    position: absolute;
    top: 0;
    right: ($main_button_size - $child_button_size + 2) / 2;
    padding: 10px + ($main_button_size - $child_button_size) / 2 0;
    margin: -(10px + ($main_button_size - $child_button_size) / 2) 0;
  }
}

/**
 * These are the basic styles for all the icons inside the main button
 */
.mfb-component__icon{
  position: absolute;
  font-size: 18px;
  text-align: center;
  line-height: 56px;
  width: 100%;
}

.mfb-component__wrap{
  // this double declaration adds some padding to the main button
  // to expand the area that triggers the hover state. The equal, negative
  // margin evens out the distance form the borders so that the button
  // does not shift out of position.
  padding: $border-distance;
  margin: -$border-distance;
}

[data-mfb-toggle="hover"]:hover,
[data-mfb-state="open"]{
  .mfb-component__icon {
    -webkit-transform: scale(1) rotate(0deg);
    transform: scale(1) rotate(0deg);
  }
}


/*------------------------------------*\
    #BUTTONS | Modifiers
\*------------------------------------*/

.mfb-component__button--main{
  @extend .mfb-component__button;
  height: $main_button_size;
  width: $main_button_size;
  z-index: 20;
}
.mfb-component__button--child{
  @extend .mfb-component__button;
  height: $child_button_size;
  width: $child_button_size;
}
// the icons for the main button
.mfb-component__main-icon--active,
.mfb-component__main-icon--resting{
  @extend .mfb-component__icon;
  -webkit-transform: scale(1) rotate(360deg);
          transform: scale(1) rotate(360deg);
  -webkit-transition: -webkit-transform 150ms cubic-bezier(.4,0,1,1);
          transition: transform 150ms cubic-bezier(.4,0,1,1);
}
// the icons for the main button
.mfb-component__child-icon,
.mfb-component__child-icon{
  @extend .mfb-component__icon;
  line-height: $child_button_size;
  font-size: 18 / 56 * $child_button_size;
}
.mfb-component__main-icon--active{
  opacity: 0;
}
[data-mfb-toggle="hover"]:hover,
[data-mfb-state="open"]{
  .mfb-component__main-icon{
    -webkit-transform: scale(1) rotate(0deg);
    transform: scale(1) rotate(0deg);
  }
  .mfb-component__main-icon--resting{
    opacity: 0;
  }
  .mfb-component__main-icon--active{
    opacity: 1;
  }
}

/*------------------------------------*\
    #BUTTONS | Animations
\*------------------------------------*/

@import "zoomin";

@include effects-zoomin;

/*------------------------------------*\
    #LABELS | base
\*------------------------------------*/

/**
 * These are the labels associated to each button,
 * exposed only when hovering the related button.
 * They are called labels but are in fact data-attributes of
 * each button (an anchor tag).
 */

[data-mfb-label]:after {
  content: attr(data-mfb-label);
  opacity: 0;
  transition: all $label-hover-off;
  background: rgba(0, 0, 0, 0.870588);
  padding: $labels-padding-vertical $labels-padding-horizontal;
  border-radius: 3px;
  color: #fff;
  font-size: $labels-font-size;
  font-family: Arial;
  font-weight: 400;
  text-transform: uppercase;
  pointer-events: none;
  position: absolute;
  top: 50%;
  margin-top: - ($labels-padding-vertical + $labels-font-size / 2);
  transition: all $label-hover-off; // the label disappears at this speed
}
[data-mfb-toggle="hover"] [data-mfb-label]:hover:after,
[data-mfb-state="open"] [data-mfb-label]:after{
  content: attr(data-mfb-label);
  opacity: 1;
  transition: all $label-hover-on; // the label appears at this speed
}
/*------------------------------------*\
    #LABELS | Modifiers
\*------------------------------------*/
.mfb-component--br, .mfb-component--tr{
  [data-mfb-label]:after {
    content: attr(data-mfb-label);
    right: $button-label-space;
  }
}
.mfb-component--br .mfb-component__list, .mfb-component--tr .mfb-component__list {
  [data-mfb-label]:after {
    content: attr(data-mfb-label);
    right: $button-label-space - ($main_button_size - $child_button_size) / 2;
  }
}
.mfb-component--tl, .mfb-component--bl{
  [data-mfb-label]:after {
    content: attr(data-mfb-label);
    left: $button-label-space;
  }
}
.mfb-component--tl .mfb-component__list, .mfb-component--bl .mfb-component__list{
  [data-mfb-label]:after {
    content: attr(data-mfb-label);
    left: $button-label-space - ($main_button_size - $child_button_size) / 2;
  }
}
/*------------------------------------*\
    #DEVELOPMENT | In development
\*------------------------------------*/
/**
 * This part is where unfinished code should stay.
 * When a feature is ready(sh) move these styles to their proper place.
 */



/*------------------------------------*\
    #DEVELOPMENT | Debuggers
\*------------------------------------*/

/**
 * These are mainly helpers for development. They do not have to end up
 * in production but it's handy to keep them when developing.
 */


/**
 * Apply this class to the html tag when developing the slide-in button
 */
